---
// src/components/atoms/Input.astro
// Accessible, styled input atom used across the site (label, hint, error)
interface Props {
  id?: string;
  name?: string;
  label?: string;
  type?: string;
  value?: string;
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  ariaDescribedBy?: string;
  hint?: string;
  error?: string;
  class?: string;
}

const {
  id,
  name,
  label,
  type = 'text',
  value,
  placeholder,
  required = false,
  disabled = false,
  ariaDescribedBy,
  hint,
  error,
  class: extraClass = '',
} = Astro.props as Props;

const inputId = id || name || `input-${Math.random().toString(36).slice(2, 9)}`;
const described = error
  ? `${inputId}-error`
  : ariaDescribedBy
    ? ariaDescribedBy
    : hint
      ? `${inputId}-hint`
      : undefined;
---

<div class={`flex flex-col gap-2 ${extraClass}`}>
  {
    label && (
      <label for={inputId} class="block mb-1 font-semibold">
        {label}
        {required ? ' *' : ''}
      </label>
    )
  }

  <input
    id={inputId}
    name={name}
    type={type as any}
    class={`input w-full ${error ? 'border-red-600' : ''}`}
    value={value}
    placeholder={placeholder}
    required={required}
    disabled={disabled}
    aria-describedby={described}
    aria-invalid={error ? 'true' : 'false'}
  />

  {
    hint && !error && (
      <p id={`${inputId}-hint`} class="text-sm text-muted-weak">
        {hint}
      </p>
    )
  }

  {
    error && (
      <p id={`${inputId}-error`} class="text-sm text-red-600">
        {error}
      </p>
    )
  }
</div>
